{\rtf1}

My linked list is a doubly linked list with a dummy node as the head.  It is a circular list.  In my list nodes are simply a value and next/previous pointers to the other values in the list.

Pseudocode:
erase goes to the value specified with a loop and changes the pointers of the previous and next nodes so that they skip the node to be erased.  Then it is erased.
remove is an extention of erase, except that it searches until it reaches a node that has the same value as the one entered.  Then it calls the erase on that position.
get can be used to set a variable to the value of the position found in the list through a loop.
set looks through the loop by incrementing position and the point in the list and then modifies the value of the node to specified value.
find searches through the list with a loop until it finds something so that value = value, then returns position.
swap will take the two arrays and do a simple temp 3 way switch for the pointers to the heads and the size values.

#include <iostream>
#include "Sequence.h"
#include <cassert>
using namespace std;

int main()
{
	Sequence s1;
	Sequence s2;
	Sequence s3;
	Sequence comb;  //Do i have to declare this am i supposed to have to

	assert(s1.empty());

	for (int i = 0; i < 11; i++)
	{
		s1.insert(i, i);
	}

	for (int i = 0; i < 5; i++)
	{
		s2.insert(i, i + 2);
	}

	s3.insert(26);	// Test insert
	s3.insert(23);
	s3.insert(25);
	s3.insert(24);
	s3.insert(25);
	s3.insert(27);
	s3.insert(27);
	ItemType b, c, d;
	s3.get(1, b);
   	s3.get(2, c);
	s3.get(3, d);
	assert(b == 24);
	assert(c == 25);
	assert(s3.size() == 7);

	ItemType a;		// Test set and get
	s1.get(1, a);
	assert(a == 1);
	s1.set(1, 4);
	s1.get(1, a);
	assert(a == 4);


	s1.swap(s3);	// Test swap
	ItemType e;
	s1.get(1, e);
	assert(e == 24);
	s3.swap(s1);
	

	int i = subsequence(s3, s2);	// Test subsequence
	assert(i == -1);

	int j = subsequence(s1, s2);
	assert(j == 2);
	

	ItemType f, g;				// Test interleave
	interleave(s1, s2, comb);
	comb.get(3, f);
	comb.get(4, g);
	assert(f == 3);
	assert(g == 2);

								// Test remove
	assert(s3.size() == 7);
	s3.remove(24);
	assert(s3.size() == 6);

	ItemType h, l;				// Test find
	h = s3.find(1);
	l = s3.find(25);
	assert(h == -1);
	assert(l == 1);

	return 0;
 }